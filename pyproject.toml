[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "space-computer"
dynamic = ["version"]
description = "AI-Powered Biomechanical Analysis & Interactive Sports Entertainment Platform"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = [
    "biomechanics", 
    "AI", 
    "sports", 
    "motion-analysis", 
    "computer-vision", 
    "3d-visualization",
    "pose-estimation",
    "healthcare",
    "rehabilitation"
]
authors = [
    {name = "Space Computer Team", email = "team@space-computer.ai"},
]
maintainers = [
    {name = "Space Computer Team", email = "team@space-computer.ai"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Multimedia :: Video :: Analysis",
    "Framework :: FastAPI",
]

dependencies = [
    # Core web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    
    # AI/ML Core
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.1.0",
    
    # Computer Vision
    "opencv-python>=4.8.0",
    "pillow>=10.1.0",
    "ultralytics>=8.0.0",  # YOLOv8
    "mediapipe>=0.10.0",
    
    # Deep Learning
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "transformers>=4.36.0",
    "diffusers>=0.25.0",
    
    # 3D Processing
    "trimesh>=4.0.0",
    "open3d>=0.18.0",
    "pymeshlab>=2023.12",
    
    # Physics Simulation
    "pybullet>=3.2.5",
    "moderngl>=5.8.0",
    
    # API Clients
    "openai>=1.6.0",
    "anthropic>=0.8.0",
    "httpx>=0.26.0",
    "aiohttp>=3.9.0",
    
    # Video Processing
    "ffmpeg-python>=0.2.0",
    "imageio[ffmpeg]>=2.33.0",
    "moviepy>=1.0.3",
    
    # File Processing
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.0",
    "boto3>=1.34.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "click>=8.1.0",
    
    # Validation & Serialization
    "marshmallow>=3.20.0",
    "jsonschema>=4.20.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Monitoring & Observability
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.40.0",
    
    # Background Tasks
    "celery[redis]>=5.3.0",
    "dramatiq[redis]>=1.15.0",
    
    # Data Validation
    "email-validator>=2.1.0",
    "phonenumbers>=8.13.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "httpx>=0.26.0",
    
    # Code Quality
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "flake8-docstrings>=1.7.0",
    "flake8-type-checking>=2.7.0",
    "mypy>=1.8.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "ruff>=0.1.8",
    
    # Documentation
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
    
    # Development Tools
    "pre-commit>=3.6.0",
    "commitizen>=3.13.0",
    "bumpversion>=0.6.0",
    "watchdog>=3.0.0",
    
    # Profiling & Performance
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

research = [
    # Scientific Computing
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipywidgets>=8.1.0",
    
    # Advanced ML
    "xgboost>=2.0.0",
    "lightgbm>=4.1.0",
    "catboost>=1.2.0",
    "optuna>=3.5.0",
    "hyperopt>=0.2.7",
    
    # Computer Vision Research
    "albumentations>=1.3.0",
    "timm>=0.9.0",
    "segment-anything>=1.0",
    
    # Medical Imaging
    "nibabel>=5.2.0",
    "dicom2nifti>=2.4.0",
    "pydicom>=2.4.0",
    
    # Statistical Analysis
    "statsmodels>=0.14.0",
    "pingouin>=0.5.3",
    "networkx>=3.2.0",
]

production = [
    # Production Server
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    "httptools>=0.6.0",
    
    # Monitoring
    "newrelic>=9.4.0",
    "datadog>=0.48.0",
    
    # Security
    "cryptography>=41.0.0",
    "certifi>=2023.11.17",
]

[project.urls]
Homepage = "https://fullscreen-triangle.github.io/space-computer"
Documentation = "https://fullscreen-triangle.github.io/space-computer"
Repository = "https://github.com/fullscreen-triangle/space-computer"
"Bug Tracker" = "https://github.com/fullscreen-triangle/space-computer/issues"
"Changelog" = "https://github.com/fullscreen-triangle/space-computer/blob/main/CHANGELOG.md"

[project.scripts]
space-computer = "space_computer.cli:main"
sc-server = "space_computer.server:main"
sc-worker = "space_computer.worker:main"
sc-migrate = "space_computer.database:migrate"

[tool.hatch.version]
path = "src/space_computer/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/space_computer"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["space_computer"]
known_third_party = [
    "fastapi", "pydantic", "sqlalchemy", "alembic",
    "numpy", "pandas", "torch", "cv2", "PIL"
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "S603"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "mediapipe.*",
    "ultralytics.*",
    "open3d.*",
    "trimesh.*",
    "pybullet.*",
    "moderngl.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=space_computer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "model: marks tests that require AI models",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "src/space_computer/__init__.py",
    "package.json:version"
]

# Safety configuration
[tool.safety]
ignore = [
    # Add any vulnerability IDs to ignore here
] 